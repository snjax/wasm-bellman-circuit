plugins {
    id "java-library"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
}

repositories {
    mavenCentral()
}

def pr() { project.findProperty('pr').toString() ?: "" }

def refName() { project.findProperty('refName').toString() ?: "" }

ext {
    baseVersion = "0.1.7"

    eligibleForPublishing = pr()?.isNumber() || refName() == "v${baseVersion}"

    artifactVersion = {
        if (pr()?.isNumber()) "${baseVersion}-${pr()}-SNAPSHOT"
        else baseVersion
    }
}

group = "com.wavesplatform"
archivesBaseName = "zwaves"
version = artifactVersion()

dependencies {
    testImplementation 'junit:junit:4.12'
}

test {
    useJUnit()
    maxHeapSize = '1G'
}

tasks.register('printVersion') {
    doLast {
        println version
    }
}

tasks.register('eligibleForPublishing') {
    doLast {
        println(eligibleForPublishing)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name.set("zwaves")
                licenses {
                    license {
                        name.set("MIT License")
                        url.set("LICENSE")
                    }
                }
                scm {
                    connection.set("scm:git:git://github.com/wavesplatform/zwaves.git")
                    developerConnection.set("scm:git:git@github.com:wavesplatform/zwaves.git")
                    url.set("https://github.com/wavesplatform/zwaves")
                }
            }
        }
    }
}

signing {
    useInMemoryPgpKeys(project.findProperty('gpgKey') as String, project.findProperty('gpgPassphrase') as String)
    sign(publishing.publications["mavenJava"])
}

nexusPublishing {
    repositories {
        sonatype {
            snapshotRepositoryUrl.set(uri("https://oss.sonatype.org/content/repositories/snapshots"))
            nexusUrl.set(uri("https://oss.sonatype.org/service/local/staging/deploy/maven2/"))
            username = project.findProperty('sonatypeUsername')
            password = project.findProperty('sonatypePassword')
        }
    }
}
